package manager;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;


import example.test.Episode;

public class EpisodeManager {
	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableEpisode = "CREATE TABLE Episode(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), releaseDate char(10), int episodeNumber, int duration, int seasonID";

	private PreparedStatement addEpisodeStmt;
	private PreparedStatement deleteAllEpisodesStmt;
	private PreparedStatement getAllEpisodesStmt;
	
	private Statement statement;
	
	public EpisodeManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Episode".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableEpisode);

			addEpisodeStmt = connection.prepareStatement("INSERT INTO Episode (name, releaseDate, episodeNumber, duration, seasonID) VALUES (?, ?, ?, ?, ?)");
			deleteAllEpisodesStmt = connection.prepareStatement("DELETE  FROM Episode");
			getAllEpisodesStmt = connection.prepareStatement("SELECT id, name, releaseDate, episodeNumber, duration, seasonID FROM Episode");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return connection;
	}

	public void clearEpisodes() {
		try {
			deleteAllEpisodesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addEpisode(Episode ep) {
		int count = 0;
		try {
			addEpisodeStmt.setString(1, ep.getName());
			addEpisodeStmt.setString(2, ep.getReleaseDate());
			addEpisodeStmt.setInt(3, ep.getEpisodeNumber());
			addEpisodeStmt.setInt(4, ep.getDuration());
			addEpisodeStmt.setInt(5, ep.getseasonID());

			count = addEpisodeStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Episode> getAllEpisodes() {
		List<Episode> episodes = new ArrayList<Episode>();

		try {
			ResultSet rs = getAllEpisodesStmt.executeQuery();

			while (rs.next()) {
				Episode ep = new Episode();
				ep.setId(rs.getInt("id"));
				ep.setName(rs.getString("name"));
				ep.setReleaseDate(rs.getString("releaseDate"));
				ep.setEpisodeNumber(rs.getInt("episodeNumber"));
				ep.setDuration(rs.getInt("duration"));
				ep.setSeasonID(rs.getInt("seasonID"));
				episodes.add(ep);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return episodes;
	}
}
